for(i in seq(1:S)){
y = mx + rnorm(n,0,sigma.e)
htmg.aux = locpolreg(x=x,y=y,h=h,q=q,r=0,tg=tg,ylim=c(-1.2,1.2),doing.plot=doing.plot.locpolreg,...)$mtg
if(doing.plot.locpolreg) lines(tg,mtg,col=2)
mean.hmtg = mean.hmtg + hmtg.aux
mena.hmtg2 = mean.hmtg2 + hmtg.aux * hmtg.aux
}
mean.hmtg = mean.hmtg/S
mean.hmtg2 = mean.hmtg2/S
sd.hmtg2 = mean.hmtg2/S
sd.hmtg = sqrt(mean.hmtg2-mean.hmtg*mean.hmtg)
if (doing.plot){
plot(tg,mtg,type="l",ylim=c(-1.2,1.2))
lines(tg,mean.hmtg,col=4)
lines(tg,mean.hmtg+2*sd.hmtg,col=3,lty=2)
lines(tg,mean.hmtg-2*sd.hmtg,col=3,lty=2)
lines(tg,mtg,col=1)
}
return(list(mean.hmtg=mean.hmtg,sd.hmtg=sd,hmtg))
}
for (h in h.v){
sim.simus(n=n,nt=nt,S=S,sigma.e=sigma.e,h=h,doing.plot=TRUE,type.kernel="epan")
title(main=paste("q=",1,";h=",h,sep=""))
}
sim.simus <- function(n=100,nt=100,sigma.e=.2,S=1,h=.2,q=1,doing.plot=TRUE,doing.plot.locpolreg=FALSE,...){
x = seq(0,1,length=n)
mx = sin(2*pi*x)
tg = seq(0,1,length=nt)
mtg = sin(2*pi*tg)
mean.hmtg = 0*mtg
mean.hmtg2 = 0*mtg
for(i in seq(1:S)){
y = mx + rnorm(n,0,sigma.e)
htmg.aux = locpolreg(x=x,y=y,h=h,q=q,r=0,tg=tg,ylim=c(-1.2,1.2),doing.plot=doing.plot.locpolreg,...)$mtg
if(doing.plot.locpolreg) lines(tg,mtg,col=2)
mean.hmtg = mean.hmtg + hmtg.aux
mean.hmtg2 = mean.hmtg2 + hmtg.aux * hmtg.aux
}
mean.hmtg = mean.hmtg/S
mean.hmtg2 = mean.hmtg2/S
sd.hmtg2 = mean.hmtg2/S
sd.hmtg = sqrt(mean.hmtg2-mean.hmtg*mean.hmtg)
if (doing.plot){
plot(tg,mtg,type="l",ylim=c(-1.2,1.2))
lines(tg,mean.hmtg,col=4)
lines(tg,mean.hmtg+2*sd.hmtg,col=3,lty=2)
lines(tg,mean.hmtg-2*sd.hmtg,col=3,lty=2)
lines(tg,mtg,col=1)
}
return(list(mean.hmtg=mean.hmtg,sd.hmtg=sd,hmtg))
}
sim.simus(n=n,nt=nt,S=S,sigma.e=sigma.e,h=h,doing.plot=TRUE,type.kernel="epan")
x = seq(0,1,length=n)
mx = sin(2*pi*x)
tg = seq(0,1,length=nt)
mtg = sin(2*pi*tg)
mean.hmtg = 0*mtg
mean.hmtg2 = 0*mtg
mean.hmtg
y = mx + rnorm(n,0,sigma.e)
htmg.aux = locpolreg(x=x,y=y,h=h,q=q,r=0,tg=tg,ylim=c(-1.2,1.2),doing.plot=doing.plot.locpolreg,...)$mtg
sim.simus <- function(n=100,nt=100,sigma.e=.2,S=1,h=.2,q=1,doing.plot=TRUE,doing.plot.locpolreg=FALSE,...){
x = seq(0,1,length=n)
mx = sin(2*pi*x)
tg = seq(0,1,length=nt)
mtg = sin(2*pi*tg)
mean.hmtg = 0*mtg
mean.hmtg2 = 0*mtg
for(i in seq(1:S)){
y = mx + rnorm(n,0,sigma.e)
htmg.aux = locpolreg(x=x,y=y,h=h,q=q,r=0,tg=tg,ylim=c(-1.2,1.2),doing.plot=doing.plot.locpolreg)$mtg
if(doing.plot.locpolreg) lines(tg,mtg,col=2)
mean.hmtg = mean.hmtg + hmtg.aux
mean.hmtg2 = mean.hmtg2 + hmtg.aux * hmtg.aux
}
mean.hmtg = mean.hmtg/S
mean.hmtg2 = mean.hmtg2/S
sd.hmtg = sqrt(mean.hmtg2-mean.hmtg*mean.hmtg)
if (doing.plot){
plot(tg,mtg,type="l",ylim=c(-1.2,1.2))
lines(tg,mean.hmtg,col=4)
lines(tg,mean.hmtg+2*sd.hmtg,col=3,lty=2)
lines(tg,mean.hmtg-2*sd.hmtg,col=3,lty=2)
lines(tg,mtg,col=1)
}
return(list(mean.hmtg=mean.hmtg,sd.hmtg=sd.hmtg))
}
for (h in h.v){
sim.simus(n=n,nt=nt,S=S,sigma.e=sigma.e,h=h,doing.plot=TRUE,type.kernel="epan")
title(main=paste("q=",1,";h=",h,sep=""))
}
n = 100;nt = 100;sigma.e=.2;S=30;q=1
h.v= c(.025,.1,.4)
for (h in h.v){
# simulated data
x = seq(0,1,length=n)
mx = sin(2*pi*x)
tg = seq(0,1,length=nt)
mtg = sin(2*pi*tg)
plot(tg,mtg,type="l",ylim=c(-1.2,1.2))
title(main=paste("q=",1,";h=",h,sep=""))
mean.hmtg = 0 * mtg
mean.hmtg2 = 0*mtg
for (i in seq(1:S)){
y = mx + rnorm(n,0,sigma.e)
hmtg.aux = locpolreg(x=x,y=y,h=h,q=q,r=0,tg=tg,ylim=c(-1.2,1.2),doing.plot=F,type.kernel="epan")$mtg
lines(tg,hmtg.aux,col=2)
}
lines(tg,mtg,col=1,lwd=2)
}
for (h in h.v){
sim.simus(n=n,nt=nt,S=S,sigma.e=sigma.e,h=h,doing.plot=TRUE,type.kernel="epan")
title(main=paste("q=",1,";h=",h,sep=""))
}
par(op)
n = 100;nt = 100;sigma.e=.2;S=30;q=1
h.v= c(.025,.1,.4)
op = par(mfrow=c(2,3))
for (h in h.v){
# simulated data
x = seq(0,1,length=n)
mx = sin(2*pi*x)
tg = seq(0,1,length=nt)
mtg = sin(2*pi*tg)
plot(tg,mtg,type="l",ylim=c(-1.2,1.2))
title(main=paste("q=",1,";h=",h,sep=""))
mean.hmtg = 0 * mtg
mean.hmtg2 = 0*mtg
for (i in seq(1:S)){
y = mx + rnorm(n,0,sigma.e)
hmtg.aux = locpolreg(x=x,y=y,h=h,q=q,r=0,tg=tg,ylim=c(-1.2,1.2),doing.plot=F,type.kernel="epan")$mtg
lines(tg,hmtg.aux,col=2)
}
lines(tg,mtg,col=1,lwd=2)
}
for (h in h.v){
sim.simus(n=n,nt=nt,S=S,sigma.e=sigma.e,h=h,doing.plot=TRUE,type.kernel="epan")
title(main=paste("q=",1,";h=",h,sep=""))
}
par(op)
sim.simus <- function(n=100,nt=100,sigma.e=.2,S=1,h=.2,q=1,doing.plot=TRUE,doing.plot.locpolreg=FALSE,...){
x = seq(0,1,length=n)
mx = sin(2*pi*x)
tg = seq(0,1,length=nt)
mtg = sin(2*pi*tg)
mean.hmtg = 0*mtg
mean.hmtg2 = 0*mtg
for(i in seq(1:S)){
y = mx + rnorm(n,0,sigma.e)
htmg.aux = locpolreg(x=x,y=y,h=h,q=q,r=0,tg=tg,ylim=c(-1.2,1.2),doing.plot=doing.plot.locpolreg,...)$mtg
if(doing.plot.locpolreg) lines(tg,mtg,col=2)
mean.hmtg = mean.hmtg + hmtg.aux
mean.hmtg2 = mean.hmtg2 + hmtg.aux * hmtg.aux
}
mean.hmtg = mean.hmtg/S
mean.hmtg2 = mean.hmtg2/S
sd.hmtg = sqrt(mean.hmtg2-mean.hmtg*mean.hmtg)
if (doing.plot){
plot(tg,mtg,type="l",ylim=c(-1.2,1.2))
lines(tg,mean.hmtg,col=4)
lines(tg,mean.hmtg+2*sd.hmtg,col=3,lty=2)
lines(tg,mean.hmtg-2*sd.hmtg,col=3,lty=2)
lines(tg,mtg,col=1)
}
return(list(mean.hmtg=mean.hmtg,sd.hmtg=sd.hmtg))
}
n = 100;nt = 100;sigma.e=.2;S=30;q=1
h.v= c(.025,.1,.4)
op = par(mfrow=c(2,3))
for (h in h.v){
# simulated data
x = seq(0,1,length=n)
mx = sin(2*pi*x)
tg = seq(0,1,length=nt)
mtg = sin(2*pi*tg)
plot(tg,mtg,type="l",ylim=c(-1.2,1.2))
title(main=paste("q=",1,";h=",h,sep=""))
mean.hmtg = 0 * mtg
mean.hmtg2 = 0*mtg
for (i in seq(1:S)){
y = mx + rnorm(n,0,sigma.e)
hmtg.aux = locpolreg(x=x,y=y,h=h,q=q,r=0,tg=tg,ylim=c(-1.2,1.2),doing.plot=F,type.kernel="epan")$mtg
lines(tg,hmtg.aux,col=2)
}
lines(tg,mtg,col=1,lwd=2)
}
for (h in h.v){
sim.simus(n=n,nt=nt,S=S,sigma.e=sigma.e,h=h,doing.plot=TRUE,type.kernel="epan")
title(main=paste("q=",1,";h=",h,sep=""))
}
par(op)
sim.simus <- function(n=100,nt=100,sigma.e=.2,S=1,h=.2,q=1,doing.plot=TRUE,doing.plot.locpolreg=FALSE, ...){
x = seq(0,1,length=n)
mx = sin(2*pi*x)
tg = seq(0,1,length=nt)
mtg = sin(2*pi*tg)
mean.hmtg = 0*mtg
mean.hmtg2 = 0*mtg
for(i in seq(1:S)){
y = mx + rnorm(n,0,sigma.e)
hmtg.aux = locpolreg(x=x,y=y,h=h,q=q,r=0,tg=tg,ylim=c(-1.2,1.2),doing.plot=doing.plot.locpolreg,...)$mtg
if(doing.plot.locpolreg) lines(tg,mtg,col=2)
mean.hmtg = mean.hmtg + hmtg.aux
mean.hmtg2 = mean.hmtg2 + hmtg.aux * hmtg.aux
}
mean.hmtg = mean.hmtg/S
mean.hmtg2 = mean.hmtg2/S
sd.hmtg = sqrt(mean.hmtg2-mean.hmtg*mean.hmtg)
if (doing.plot){
plot(tg,mtg,type="l",ylim=c(-1.2,1.2))
lines(tg,mean.hmtg,col=4)
lines(tg,mean.hmtg+2*sd.hmtg,col=3,lty=2)
lines(tg,mean.hmtg-2*sd.hmtg,col=3,lty=2)
lines(tg,mtg,col=1)
}
return(list(mean.hmtg=mean.hmtg,sd.hmtg=sd.hmtg))
}
n = 100;nt = 100;sigma.e=.2;S=30;q=1
h.v= c(.025,.1,.4)
op = par(mfrow=c(2,3))
for (h in h.v){
# simulated data
x = seq(0,1,length=n)
mx = sin(2*pi*x)
tg = seq(0,1,length=nt)
mtg = sin(2*pi*tg)
plot(tg,mtg,type="l",ylim=c(-1.2,1.2))
title(main=paste("q=",1,";h=",h,sep=""))
mean.hmtg = 0 * mtg
mean.hmtg2 = 0*mtg
for (i in seq(1:S)){
y = mx + rnorm(n,0,sigma.e)
hmtg.aux = locpolreg(x=x,y=y,h=h,q=q,r=0,tg=tg,ylim=c(-1.2,1.2),doing.plot=F,type.kernel="epan")$mtg
lines(tg,hmtg.aux,col=2)
}
lines(tg,mtg,col=1,lwd=2)
}
for (h in h.v){
sim.simus(n=n,nt=nt,S=S,sigma.e=sigma.e,h=h,doing.plot=TRUE,type.kernel="epan")
title(main=paste("q=",1,";h=",h,sep=""))
}
par(op)
library(ggplot2)
mpg
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, size = cyl, color = class))
str(mpg)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, size = cyl, color = "blue"))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = "blue"))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, size = cyl), color = "blue")
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, size = cyl, color = "blue"))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, size = cyl), color = "blue")
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy), color = "blue")
#' Example:
#'
#' In the above chart, make all the points with displ <5 draw
#' in one color and those with displ> = 5 in another.
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, size = cyl, color = displ <5))
?mpg
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_wrap(~ class)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy,color=drv))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy,linetype=drv))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy,group=drv))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy,color=drv))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy,linetype=drv))
ggplot(mpg) +
geom_smooth(aes(x = displ, y = hwy))
ggplot(mpg) +
geom_smooth(aes(x = displ, y = hwy,color=drv))
ggplot(mpg) +
geom_smooth(aes(x = displ, y = hwy,linetype=drv))
ggplot(mpg) +
geom_smooth(aes(x = displ, y = hwy,group=drv))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy)) +
geom_smooth(aes(x = displ, y = hwy))
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
geom_smooth()
# Each layer can be associated with different data.frames
# It is mandatory to specify the data parameter in those geometries that use a different dataset than the one that appears in ggplot()
# Using 2 data.frames
mpg_subcompact <- mpg[mpg$class == "subcompact", ]
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
geom_smooth(data = mpg_subcompact, se = FALSE)
ggplot(mpg, aes(x = displ, y = hwy))
p <- ggplot(mpg, aes(x = displ, y = hwy))
p + geom_point()
p + geom_line()
p + geom_point()
+ geom_smooth()
p <- ggplot(mpg, aes(x = displ, y = hwy))
p + geom_point()
+ geom_smooth(se=FALSE)
p <- ggplot(mpg, aes(x = displ, y = hwy))
p + geom_point()+ geom_smooth(se=FALSE)
p + geom_point()+ geom_smooth(se=FALSE,group=drv)
p <- ggplot(mpg, aes(x = displ, y = hwy))
p + geom_point()+ geom_smooth(se=FALSE,group=drv)
p + geom_point()+ geom_smooth(se=FALSE,aes(group=drv))
p + geom_point(aes(color=drv))+ geom_smooth(se=FALSE,aes(group=drv,color=drv))
p + geom_point(aes(color=drv))+ geom_smooth(se=FALSE)
p + geom_point(aes(color=drv))+ geom_smooth(se=FALSE,aes(linetype=drv))
p + geom_point(aes(color=drv))+ geom_smooth(se=FALSE,aes(group=drv))
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut, colour = cut))
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut, colour = cut,position="stack"))
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut, colour = cut))
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut, colour = cut,position="dodge"))
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut, colour = cut,position="identity"))
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut, colour = cut,position="fill"))
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut,position="fill"))
ggplot(diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity,position="fill"))
ggplot(diamonds,mapping = aes(x = cut, fill = clarity,position="fill")) +
geom_bar(position = "stack")
#' Ejercicio:
#'
#' Modifica el gráfico anterior utilizando diferentes valores
#' en el parámetro position (“stack”, “dodge”, “identity”, “fill”).
ggplot(diamonds,mapping = aes(x = cut, fill = clarity,position="fill")) +
geom_bar()
ggplot(diamonds,mapping = aes(x = cut, fill = clarity,position="fill")) +
geom_bar(position = "stack")
#' Ejercicio:
#'
#' Modifica el gráfico anterior utilizando diferentes valores
#' en el parámetro position (“stack”, “dodge”, “identity”, “fill”).
p = ggplot(diamonds,mapping = aes(x = cut, fill = clarity,position="fill"))
p + geom_bar()
p + geom_bar(position="dodge")
p + gemo_bar(position="identity")
p + geom_bar(position="identity")
p + geom_bar(position="fill")
p <- ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
geom_smooth()
p +
labs(title = "Fuel efficiency vs. Engine size",
x = "Engine displacement (L)",
y = "Highway fuel efficiency (mpg)",
color = "Type of Car",
caption = "Data from fueleconomy.gov")
(p <- ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = class)))
p +
scale_x_continuous() +
scale_y_continuous() +
scale_color_discrete()
p +
scale_color_discrete(labels = c("A" , "B", "C", "D", "E", "F", "G"))
p +
scale_x_continuous(labels = NULL) +
scale_y_continuous(breaks = seq(15, 40, by = 5))
p +
scale_y_log10(breaks = seq(15, 40, by = 5))
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
geom_smooth()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
geom_smooth() +
coord_cartesian(xlim = c(5, 7), ylim = c(10, 30))
p +  theme_bw()
p +  theme_grey()
p +  theme_light()
p +  theme_dark()
library(ggthemes)
install.packages("ggthemes")
library(ggthemes)
p <- ggplot(mpg, aes(x = displ, y = hwy, colour = factor(cyl))) +
geom_point() +
labs(title = "mpg")
p
p + theme_economist()
p + theme_economist() + scale_colour_economist()
theme_jesus <- function () {
theme_bw(base_size=12, base_family="Courier") %+replace%
theme(
panel.background  = element_blank(),
plot.background = element_rect(fill="gray96", colour=NA),
legend.background = element_rect(fill="transparent", colour=NA),
legend.key = element_rect(fill="transparent", colour=NA)
)
}
p + theme_bw()
p + theme_jesus()
# Experiment with labels, themes and scales in order to create a figure like this,
# based on the `diamonds` data (x: carat, y: price, color: cut)
p = ggplot(diamonds,aes(x=carat,y=price,color=cut))
p
p + geom_point()
p
p = ggplot(diamonds,aes(x=carat,y=price,color=cut))
p + geom_point()
p = ggplot(diamonds,aes(x=carat,y=price))
p + geom_point()+geom_smooth(se=FALSE,aes(color=cut))
p = ggplot(diamonds,aes(x=carat,y=price))
p + geom_point()
+ geom_smooth(se=FALSE,aes(color=cut))
p = ggplot(diamonds,aes(x=carat,y=price))
p + geom_point()  +
geom_smooth(se=FALSE,aes(color=cut))+
scale_x_log10()+
scale_y_log10()+
labs(title = "Lines show GAM estimate of mean values of each level of cut",
x = "Log Carat Size",
y = "Log Price Size",
color = "Cut Rating",
caption = "Data provided by Hadley Wickham")
p = ggplot(diamonds,aes(x=carat,y=price))
p + geom_point()  +
geom_smooth(se=FALSE,aes(color=cut))+
scale_x_log10()+
scale_y_log10()+
labs(title = "Ideal cut diamonds command the best price for every carat size",
subtitle = "Lines show GAM estimate of mean values of each level of cut",
x = "Log Carat Size",
y = "Log Price Size",
color = "Cut Rating",
caption = "Data provided by Hadley Wickham")+
scale_color_brewer(palette = "Greens")+
library(plotly)
p = ggplot(diamonds,aes(x=carat,y=price))
p + geom_point()  +
geom_smooth(se=FALSE,aes(color=cut))+
scale_x_log10()+
scale_y_log10()+
labs(title = "Ideal cut diamonds command the best price for every carat size",
subtitle = "Lines show GAM estimate of mean values of each level of cut",
x = "Log Carat Size",
y = "Log Price Size",
color = "Cut Rating",
caption = "Data provided by Hadley Wickham")+
scale_color_brewer(palette = "Greens")+
theme_light()
ggsave("my-plot.pdf", width = 6, height = 6)
ggsave("my-plot.png", width = 6, height = 6)
png("my-plot_4.png", width = 800, height = 600)
print(p)
dev.off()
png("my-plot_4.png", width = 800, height = 600)
print(p)
dev.off()
library(plotly)
(p <- ggplotly(p))
p <- ggplot(mpg, aes(x = displ, y = hwy, colour = factor(cyl))) +
geom_point() +
labs(title = "mpg")
(p <- ggplotly(p))
library(gridExtra)
p1 <- ggplot(diamonds, aes(x = carat, y = price)) +
geom_point()
p2 <- ggplot(diamonds, aes(x = carat, y = price)) +
geom_smooth(aes(color = cut), se = FALSE)
grid.arrange(p1, p2, nrow = 1)
library(ggplot2)
library(dplyr)
df <- read.csv2("companies.csv")
library(knitr)
library(dplyr)
setwd("C:/UPC Master/Bayesian Analysis/2023 - Session 0-20230302")
df <- read.csv2("companies.csv")
df
setwd("C:/GIthub/MyWebsite/SL2023")
knitr::opts_chunk$set(echo = TRUE)
library(sm)
library(ggplot2)
countries<-read.csv2(file="HDI.2017.subset.csv",row.names = 1)
attach(countries)
le.fm.r = round(le.fm)
